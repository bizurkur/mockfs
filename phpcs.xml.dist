<?xml version="1.0"?>
<ruleset name="Bizurkur">
    <file>src/</file>
    <file>tests/</file>

    <config name="installed_paths" value="vendor/slevomat/coding-standard" />
    <config name="ignore_warnings_on_exit" value="1" />

    <arg name="basepath" value="." />
    <arg name="colors" />
    <arg name="tab-width" value="4" />
    <arg name="parallel" value="75" />
    <arg value="wp" />

    <!-- Don't hide tokenizer exceptions -->
    <rule ref="Internal.Tokenizer.Exception">
        <type>error</type>
    </rule>

    <!-- Include the whole PSR12 standard (includes PSR1 and PSR2) -->
    <rule ref="PSR12">
        <!-- Checked by SlevomatCodingStandard.Classes.ClassConstantVisibility.MissingConstantVisibility -->
        <exclude name="PSR12.Properties.ConstantVisibility.NotFound" />
    </rule>
    <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
        <message>Method name "%s" is not in camelCase format</message>
    </rule>

    <!-- Require presence of declare(strict_types=1) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="linesCountBeforeDeclare" value="1" />
            <property name="spacesCountAroundEqualsSign" value="0" />
            <property name="linesCountAfterDeclare" value="1" />
        </properties>
    </rule>

    <!-- PHP -->
    <!-- Forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator" />
    <!-- Force PHP 7 param and return types to be lowercased -->
    <rule ref="Generic.PHP.LowerCaseType" />
    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag" />
    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <!-- Forbid using any kinda of php tag except `<?php` -->
    <rule ref="Generic.PHP.DisallowAlternativePHPTags" />
    <rule ref="Generic.PHP.DisallowShortOpenTag" />
    <!-- Forbid the use of goto -->
    <rule ref="Generic.PHP.DiscourageGoto" />
    <rule ref="Generic.PHP.DiscourageGoto.Found">
        <!-- Why did PHP add GOTO? Terrible. -->
        <message>Use of GOTO is not allowed.</message>
        <type>error</type>
    </rule>
    <!-- Forbid alias functions, debug, or dangerous functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="var_dump" value="null" />
                <element key="print_r" value="null" />
                <element key="create_function" value="null" />
                <element key="eval" value="null" />
                <element key="print" value="echo" />
                <element key="chop" value="rtrim" />
                <element key="close" value="closedir" />
                <element key="compact" value="null" />
                <element key="delete" value="unset" />
                <element key="doubleval" value="floatval" />
                <element key="extract" value="null" />
                <element key="fputs" value="fwrite" />
                <element key="ini_alter" value="ini_set" />
                <element key="is_a" value="null" />
                <element key="is_double" value="is_float" />
                <element key="is_integer" value="is_int" />
                <element key="is_long" value="is_int" />
                <element key="is_null" value="null" />
                <element key="is_real" value="is_float" />
                <element key="is_writeable" value="is_writable" />
                <element key="join" value="implode" />
                <element key="key_exists" value="array_key_exists" />
                <element key="pos" value="current" />
                <element key="settype" value="null" />
                <element key="show_source" value="highlight_file" />
                <element key="sizeof" value="count" />
                <element key="strchr" value="strstr" />
                <element key="user_error" value="trigger_error" />
            </property>
        </properties>
    </rule>
    <!-- Detect commented out code -->
    <rule ref="Squiz.PHP.CommentedOutCode" />
    <!-- Forbid useless parentheses -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />
    <!-- Forbid useless semicolon `;` -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />
    <!-- Forbid `list(...)` syntax -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList" />
    <!-- Forbid use of longhand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast" />
    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions" />
    <!-- Forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode" />
    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage" />

    <!-- FILES -->
    <rule ref="Generic.Files.ByteOrderMark" />
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="80" />
            <property name="absoluteLineLimit" value="120" />
        </properties>
    </rule>
    <rule ref="Generic.Files.LineLength.TooLong">
        <message>Line longer than %s characters; contains %s characters</message>
        <severity>3</severity>
    </rule>
    <rule ref="Generic.Files.LineLength.MaxExceeded">
        <message>Line contains %2$s chars, which is more than the limit of %1$s</message>
        <type>warning</type>
    </rule>
    <rule ref="Generic.Files.OneObjectStructurePerFile" />

    <!-- NAMESPACES -->
    <!-- Requires only one namespace in a file. -->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />
    <!-- Enforces one space after namespace, disallows content between namespace name and semicolon -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration" />
    <!-- Require newlines around namespace declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="1" />
            <property name="linesCountAfterNamespace" value="1" />
        </properties>
    </rule>

    <!-- USE STATEMENTS -->
    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />
    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true" />
        </properties>
    </rule>
    <!-- Forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />
    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine" />
    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
    <!-- Forbid useless alias for classes, constants and functions -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />
    <!-- Require empty newlines before and after uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1" />
            <property name="linesCountBetweenUseTypes" value="0" />
            <property name="linesCountAfterLastUse" value="1" />
            <property name="linesCountBetweenUseTypes" value="1" />
        </properties>
    </rule>

    <!-- CLASSES -->
    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName" />
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <!-- Private properties MUST not be prefixed with an underscore -->
        <type>error</type>
    </rule>
    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName" />
    <!-- Checks the declaration of the class and its inheritance is correct -->
    <rule ref="Squiz.Classes.ClassDeclaration" />
    <!-- Require usage of ::class instead of __CLASS__, get_class(), get_class($this), get_called_class() and get_parent_class() -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference" />
    <!-- Forbid uses of multiple traits separated by comma -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration" />
    <!-- Require no spaces before trait use, between trait uses and one space after trait uses -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0" />
            <property name="linesCountBetweenUses" value="0" />
            <property name="linesCountAfterLastUse" value="1" />
            <property name="linesCountAfterLastUseWhenLastInClass" value="0" />
        </properties>
    </rule>
    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" value="true" />
        </properties>
    </rule>
    <!-- Forbid more than one constant declared per statement -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition" />
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1" />
            <property name="maxLinesCountBeforeWithComment" value="1" />
            <property name="minLinesCountBeforeWithoutComment" value="1" />
            <property name="maxLinesCountBeforeWithoutComment" value="1" />
        </properties>
    </rule>
    <!-- Forbid empty lines around type declarations -->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0" />
            <property name="linesCountBeforeClosingBrace" value="0" />
        </properties>
    </rule>
    <!-- Checks that there's a single space between a typehint and a property name -->
    <rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration" />
    <!-- Force `self::` for self-reference, force lower-case self, forbid spaces around `::` -->
    <rule ref="Squiz.Classes.SelfMemberReference" />
    <rule ref="Squiz.Classes.ValidClassName.NotCamelCaps">
        <message>%s name "%s" is not in StudlyCase format</message>
    </rule>
    <!-- Checks that class/trait/interface members are in the correct order. -->
    <!--
        TODO: Figure out how to change the error message to not suck.
        The current error message is not 100% clear what the issue is:
        Example: `The placement of "protected abstract methods" group is invalid. Last group was "private methods" and one of these is expected after it: private static methods, private methods`
    -->
    <!-- <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses" />

                <element value="public constants" />
                <element value="protected constants" />
                <element value="private constants" />
                <element value="enum cases" />

                <element value="public properties" />
                <element value="public static properties" />
                <element value="protected properties" />
                <element value="protected static properties" />
                <element value="private properties" />
                <element value="private static properties" />

                <element value="constructor" />
                <element value="static constructors" />
                <element value="destructor" />
                <element value="magic methods" />
                <element value="all public methods" />
                <element value="all protected methods" />
                <element value="all private methods" />
            </property>
        </properties>
        <exclude-pattern>test/*</exclude-pattern>
        <exclude-pattern>tests/*</exclude-pattern>
        <exclude-pattern>*/test/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule> -->
    <!-- Checks number of spaces before `:` and before type -->
    <rule ref="SlevomatCodingStandard.Classes.BackedEnumTypeSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0" />
            <property name="spacesCountBeforeType" value="1" />
        </properties>
    </rule>
    <!-- Disallows long classes -->
    <rule ref="SlevomatCodingStandard.Classes.ClassLength">
        <properties>
            <property name="includeComments" value="0" />
            <property name="includeWhitespace" value="0" />
            <property name="maxLinesLength" value="300" />
        </properties>
        <exclude-pattern>test/*</exclude-pattern>
        <exclude-pattern>tests/*</exclude-pattern>
        <exclude-pattern>*/test/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <!-- METHODS / FUNCTIONS -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <!-- Private methods MUST not be prefixed with an underscore -->
        <type>error</type>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1" />
        </properties>
    </rule>
    <!-- Forbid unused variables passed to closures via `use` -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter">
        <!-- With inheritence, this isn't always possible to enforce. -->
        <type>warning</type>
        <severity>5</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction" />
    <rule ref="SlevomatCodingStandard.Functions.StrictCall" />
    <!-- Ensure Arrow Functions declaration format -->
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
        <properties>
            <property name="spacesCountAfterKeyword" value="1" />
            <property name="spacesCountBeforeArrow" value="1" />
            <property name="spacesCountAfterArrow" value="1" />
        </properties>
    </rule>
    <!-- Enforces trailing commas in multi-line declarations -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration">
        <properties>
            <!-- TODO: Enable this once on php 8+ -->
            <property name="enable" value="false" />
        </properties>
    </rule>
    <!-- Disallows long functions -->
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength">
        <properties>
            <!-- Because of legacy code, there may be functions absurdly long -->
            <!-- We can slowly lower this over time -->
            <property name="maxLinesLength" value="100" />
        </properties>
        <exclude-pattern>test/*</exclude-pattern>
        <exclude-pattern>tests/*</exclude-pattern>
        <exclude-pattern>*/test/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <!-- TYPE HINTS -->
    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
    <!-- Require the `null` type hint to be in the last position of annotations -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />
    <!-- Checks format of union type hints -->
    <rule ref="SlevomatCodingStandard.TypeHints.UnionTypeHintFormat">
        <properties>
            <property name="enable" value="true" />
            <property name="withSpaces" value="no" />
            <property name="nullPosition" value="last" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint" />
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint.UselessAnnotation">
        <!-- Some IDEs still need the doc block -->
        <type>warning</type>
        <severity>0</severity>
    </rule>

    <!-- CONTROL STRUCTURES -->
    <rule ref="Generic.ControlStructures.InlineControlStructure" />
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration" />
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration" />
    <!-- Forbid assignments in conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition" />
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch" />
    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />
    <!-- Forbid usage of conditions when a simple return can be used -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />
    <!-- Require language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />
    <!-- Forbid fancy yoda conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />
    <!-- Require usage of early exit -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreStandaloneIfInScope" value="1" />
            <property name="ignoreOneLineTrailingIf" value="1" />
            <property name="ignoreTrailingIfWithOneInstruction" value="1" />
        </properties>
    </rule>
    <!-- Require consistent spacing for jump statements -->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="allowSingleLineYieldStacking" value="1" />
            <property name="linesCountBefore" value="1" />
            <property name="linesCountBeforeFirst" value="0" />
            <property name="linesCountBeforeWhenFirstInCaseOrDefault" value="0" />
            <property name="linesCountAfter" value="1" />
            <property name="linesCountAfterLast" value="0" />
            <property name="linesCountAfterWhenLastInCaseOrDefault" value="0" />
            <property name="linesCountAfterWhenLastInLastCaseOrDefault" value="0" />
            <property name="jumpStatements" type="array">
                <element value="return" />
                <element value="throw" />
                <element value="yield" />
                <element value="yield_from" />
            </property>
        </properties>
    </rule>
    <!-- Forbid usage of boolean-only ternary operator usage (e.g. $foo ? true : false) -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />
    <!-- Disallow else if in favor of elseif -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>
    <!-- Require usage of null coalesce operator equal operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator">
        <properties>
            <!-- TODO: Enable this once on php 7.4+ -->
            <property name="enable" value="false" />
        </properties>
    </rule>
    <!-- Requires using ?-> operator. -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator">
        <properties>
            <!-- TODO: Enable this once on php 8+ -->
            <property name="enable" value="false" />
        </properties>
    </rule>

    <!-- ARRAYS -->
    <!-- Force array element indentation with 4 spaces -->
    <rule ref="Generic.Arrays.ArrayIndent" />
    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation" />
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation.ImplicitArrayCreationUsed">
        <message>Implicit array creation is not allowed. Define the array first, then add items to it.</message>
    </rule>
    <!-- Require comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />
    <!-- Require that single line arrays have the correct spacing: no space around brackets and one space after comma -->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace" />
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement" />
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- Disable arrow alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" />
        <!-- Uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" />
        <!-- Allow multiple values on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" />
        <!-- Disable alignment of braces -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" />
        <!-- Disable alignment of values with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
        <!-- Checked by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoComma" />
        <!-- Allow multi-line arrays with a single value -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />
        <!-- Allow associative / non-associative mixed arrays -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeySpecified" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified" />
    </rule>

    <!-- WHITESPACE -->
    <!-- Forbid using tabs -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent" />
    <!-- Keep things properly indented -->
    <rule ref="Generic.WhiteSpace.ScopeIndent" />
    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR-12 -> turning back off -->
            <property name="ignoreBlankLines" value="false" />
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR-12 -> turning back on -->
        <severity>5</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="spacingBeforeFirst" value="0" />
        </properties>
    </rule>
    <!-- Require no spacing after spread operator -->
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing">
        <properties>
            <property name="spacesCountAfterOperator" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.ReferenceSpacing">
        <properties>
            <property name="spacesCountAfterReference" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
        <properties>
            <property name="ignoreSpacesBeforeAssignment" value="0" />
            <property name="ignoreSpacesInAnnotation" value="1" />
            <property name="ignoreSpacesInComment" value="1" />
            <property name="ignoreSpacesInParameters" value="0" />
        </properties>
    </rule>
    <!-- Forbid spaces in type casts -->
    <rule ref="Squiz.WhiteSpace.CastSpacing" />
    <!-- Require there be no space between increment/decrement operator and its operand -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing" />
    <!-- Require space after language constructs -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <!-- Forbid spaces before semicolon `;` -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
    <!-- Require 1 line before and after function, except at the top and bottom -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="spacingBeforeFirst" value="0" />
            <property name="spacingAfterLast" value="0" />
        </properties>
    </rule>
    <!-- Forbid blank line after function opening brace -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />

    <!-- MISC -->
    <!-- Require using Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />
    <!-- Forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />
    <!-- Requires non-capturing catch when the variable with exception is not used -->
    <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch" />
    <!-- Forbid useless variables -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true" />
        </properties>
    </rule>
    <!-- Forbid weak comparisons -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators" />
    <!-- Forbid spacing before the negative operator `-` -->
    <rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing" />
    <!-- Require the usage of assignment operators, eg `+=`, `.=` when possible -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator" />
    <!-- Forbid PHP 4 constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName" />
    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true" />
        </properties>
    </rule>
    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch" />
    </rule>
    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <!-- Forbid useless empty method overrides -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />
    <!-- Force camelCase variables -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore" />
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps">
        <message>Member variable "%s" is not in camelCase format</message>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.NotCamelCaps">
        <message>Variable "%s" is not in camelCase format</message>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.StringNotCamelCaps">
        <message>Variable "%s" is not in camelCase format</message>
    </rule>
    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators" />
    <!-- Forbid strings in `"` unless necessary -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <type>warning</type>
        <severity>0</severity>
        <message>Variable "%s" not allowed in double quoted string; use sprintf() or concatenation instead</message>
    </rule>

    <!-- COMMENTING -->
    <rule ref="Generic.Commenting.Todo" />
    <rule ref="Generic.Commenting.DocComment">
        <!-- A description SHOULD be there, not MUST be there -->
        <exclude name="Generic.Commenting.DocComment.MissingShort" />
        <!-- Sometimes @see or similar makes more sense to be first -->
        <exclude name="Generic.Commenting.DocComment.ParamNotFirst" />
        <!-- This conflicts with tags SHOULD NOT be grouped together -->
        <exclude name="Generic.Commenting.DocComment.TagValueIndent" />
        <!-- If there's no description, there shouldn't be a blank line -->
        <exclude name="Generic.Commenting.DocComment.SpacingBeforeTags" />
        <!-- Allow inline annotations. -->
        <exclude name="Generic.Commenting.DocComment.ContentAfterOpen" />
        <exclude name="Generic.Commenting.DocComment.ContentBeforeClose" />
        <!-- Covered by SlevomatCodingStandard.Commenting.EmptyComment.EmptyComment -->
        <exclude name="Generic.Commenting.DocComment.Empty" />
    </rule>
    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@author" />
                <element value="@category" />
                <element value="@copyright" />
                <element value="@created" />
                <element value="@license" />
                <element value="@package" />
                <element value="@since" />
                <element value="@subpackage" />
                <element value="@version" />
            </property>
        </properties>
    </rule>
    <!-- Forbid empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />
    <rule ref="SlevomatCodingStandard.Commenting.DeprecatedAnnotationDeclaration" />
    <!-- Report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration">
        <properties>
            <property name="allowDocCommentAboveReturn" value="1" />
        </properties>
    </rule>
    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i" />
                <element value="~^Created by [^\n]+\z~i" />
                <element value="~^(User|Date|Time|Email): [^\n]+\z~i" />
                <element value="~^\S+ [gs]etter\.\z~i" />
                <element value="~^(Class|Interface|Trait) \S+\z~i" />
            </property>
        </properties>
    </rule>
    <!-- Checks for useless doc comments. If the native method declaration contains
    everything and the phpDoc does not add anything useful, it's reported as useless -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment" />
    <!-- Reports documentation comments containing only {@inheritDoc} -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment" />
    <!-- Forbid comments starting with # -->
    <rule ref="PEAR.Commenting.InlineComment" />

    <!-- COMPLEXITY -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="5" />
            <property name="absoluteComplexity" value="15" />
        </properties>
    </rule>
    <!-- Enforces maximum cognitive complexity for functions -->
    <!-- https://www.sonarsource.com/docs/CognitiveComplexity.pdf -->
    <rule ref="SlevomatCodingStandard.Complexity.Cognitive">
        <properties>
            <property name="maxComplexity" value="15" />
        </properties>
        <exclude-pattern>test/*</exclude-pattern>
        <exclude-pattern>tests/*</exclude-pattern>
        <exclude-pattern>*/test/*</exclude-pattern>
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <!-- Avoid heaving nesting -->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="3" />
            <property name="absoluteNestingLevel" value="5" />
        </properties>
    </rule>
</ruleset>
